    /**
{% block phpdoc_method_header %}
     * Get all {{ entity }} entities.
     *
     * @param \FOS\RestBundle\Request\ParamFetcherInterface $paramFetcher
     * @return \Symfony\Component\HttpFoundation\Response
     *
     * @QueryParam(name="offset", requirements="\d+", nullable=true, description="Offset from which to start listing notes.")
     * @QueryParam(name="limit", requirements="\d+", default="20", description="How many notes to return.")
     * @QueryParam(name="order_by", nullable=true, array=true, description="Order by fields. Must be an array ie. &order_by[name]=ASC&order_by[description]=DESC")
     * @QueryParam(name="filters", nullable=true, array=true, description="Filter by fields. Must be an array ie. &filters[id]=3")
{% endblock phpdoc_method_header %}
     *
{% block phpdoc_method_annotations %}
{% if 'annotation' == format %}
{% endif %}
{% endblock phpdoc_method_annotations %}
     */
{% block method_definition %}
    public function get{{ entity }}sAction(ParamFetcherInterface $paramFetcher)
{% endblock method_definition %}
    {
{% block method_body %}
        try {
            $offset = $paramFetcher->get('offset');
            $limit = $paramFetcher->get('limit');
            $order_by = $paramFetcher->get('order_by');
            $filters = !is_null($paramFetcher->get('filters')) ? $paramFetcher->get('filters') : array();

            $em = $this->getDoctrine()->getManager();
            $entities = $em->getRepository('{{ bundle }}:{{ entity }}')->findBy($filters, $order_by, $limit, $offset);
            if ($entities) {
                return $this->view($entities, Codes::HTTP_OK);
            } else {
                return $this->view('Not Found', Codes::HTTP_NOT_FOUND);
            }
        } catch (\Exception $e) {
            return $this->view($e->getMessage(), Codes::HTTP_INTERNAL_SERVER_ERROR);
        }
{% endblock method_body %}
{% block method_return %}
{% endblock method_return %}
    }
{% block form %}

{% endblock form %}
