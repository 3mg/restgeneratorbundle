    /**
{% block phpdoc_method_header %}
     * Update a {{ entity }} entity.
     *
     * @View(serializerEnableMaxDepthChecks=true)
{% if isBleamable %}
     * @ValidateUser("entity")
{% endif %}
{% if doc %}
     * @ApiDoc(
     *  description="Edit {{entity}}",
     *  input="AppBundle\Form\{{entity}}Type",
     *  output="{{ entityPath }}",
     *  statusCodes={
     *      200="Returned when successful",
     *      403="Returned when the user is not authorized",
     *      404={
     *        "Returned when the entity is not found",
     *        "Returned when something else is not found"
     *      }
     *   },
     *   tags={
     *       "secured" = "#FFCC33"
     *   }
     * )
     *
{% endif %}
     * @param Request $request
     * @param $entity
     *
     * @return Response
{% endblock phpdoc_method_header %}
{% block phpdoc_method_annotations %}
{% if 'annotation' == format %}{% endif %}
{% endblock phpdoc_method_annotations %}
     */
{% block method_definition %}
    public function putAction(Request $request, {{ entity }} $entity)
{% endblock method_definition %}
    {
{% block method_body %}
        try {
            $em = $this->getDoctrine()->getManager();
            $request->setMethod('PATCH'); //Treat all PUTs as PATCH
            $form = $this->createForm(new {{ entity }}Type(), $entity, array("method" => $request->getMethod()));
            $this->removeExtraFields($request, $form);
            $form->handleRequest($request);
            if ($form->isValid()) {
                $em->flush();

                return $entity;
            }

            return FOSView::create(array('errors' => $form->getErrors()), Codes::HTTP_INTERNAL_SERVER_ERROR);
        } catch (\Exception $e) {
            return FOSView::create($e->getMessage(), Codes::HTTP_INTERNAL_SERVER_ERROR);
        }
{% endblock method_body %}
{% block method_return '' %}
    }
{% block form '' %}
