<?php

namespace {{ namespace }}\Controller{{ entity_namespace ? '\\' ~ entity_namespace : '' }};

{% block use_statements %}
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Form\Form;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;
{% if 'annotation' == format -%}
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Template;
{%- endif %}

use {{ namespace }}\Entity\{{ entity }};
use {{ namespace }}\Form\{{ entity }}Type;

use FOS\RestBundle\View\View;
use FOS\RestBundle\Request\ParamFetcherInterface;
use FOS\RestBundle\Util\Codes;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\ParamConverter;
{% endblock use_statements %}

/**
{% block phpdoc_class_header %}
 * {{ entity }} controller.
{% endblock phpdoc_class_header %}
 *
{% block phpdoc_class_annotations %}
{% if 'annotation' == format %}
 * @Route("/{{ route_prefix }}")
{% endif %}
{% endblock phpdoc_class_annotations %}
 */
{% block class_definition %}
class {{ entity_class }}RESTController extends Controller
{% endblock class_definition %}
{
{% block class_body %}
    {%- include 'rest/actions/getById.php.twig' %}

    {%- include 'rest/actions/getAll.php.twig' %}

    {%- include 'rest/actions/post.php.twig' %}

    {%- include 'rest/actions/put.php.twig' %}

    {%- include 'rest/actions/delete.php.twig' %}

    /**
    * Create the {{ entity }} form
    *
    * @param null $type
    * @param null $data
    * @param array $options
    * @internal param $entity
    * @internal param $method
    * @return Form|\Symfony\Component\Form\FormInterface
    */
    public function createForm($type = null, $data = null, array $options = array())
    {
        $form = $this->container->get('form.factory')->createNamed(
            null, //since we're not including the form name in the request, set this to null
            $type,
            $data,
            $options
        );

        return $form;
    }

    /**
    * Bind the entity to the form
    * Supports submitting partial updates
    *
    * @param Form $form
    * @param $entity
    * @param null $old_entity
    * @internal param $data
    */
    protected function formBind(Form $form, $entity, $old_entity = null)
    {
        $form_fields = $form->all();

        /*
        * If any of the field values are null in the new entity apply the values from the old entity
        * This is a hack, because I couldn't figure out how to submit partials
        */
        if (!is_null($old_entity)) {
            foreach ($form_fields as $name => $field) {
                $get = 'get' . ucfirst($name);
                $set = 'set' . ucfirst($name);
                if ($entity->$get() === null) {
                    $entity->$set($old_entity->$get());
                }
            }
        }
        $form->setData($entity);

        $form->submit(null, false);
    }

    /**
    * Create the Rest View
    *
    * @param $entity
    * @param null $statusCode
    * @param string $template
    * @return \Symfony\Component\HttpFoundation\Response
    */
    protected function view($entity, $statusCode = null, $template = "")
    {
        $view = new View($entity, $statusCode);
        //$view->setTemplate($template);
        $view->setData(array('data'=>$entity));

        $view_handler = $this->get('fos_rest.view_handler');

        return $view_handler->handle($view);
    }
{% endblock class_body %}
}
